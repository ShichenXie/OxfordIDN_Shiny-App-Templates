shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(list(
ui = pageWithSidebar(
headerPanel("Test"),
sidebarPanel(
tags$head(tags$style(type="text/css", "
#loadmessage {
position: fixed;
top: 0px;
left: 0px;
width: 100%;
padding: 5px 0px 5px 0px;
text-align: center;
font-weight: bold;
font-size: 100%;
color: #000000;
background-color: #CCFF66;
z-index: 105;
}
")),
numericInput('n', 'Number of obs', 100),
conditionalPanel(condition="$('html').hasClass('shiny-busy')",
tags$div("Loading...",id="loadmessage"))
),
mainPanel(plotOutput('plot'))
),
server = function(input, output) {
output$plot <- renderPlot({ Sys.sleep(2); hist(runif(input$n)) })
}
))
runApp()
source('~/Github/Live-Data_Scripts-and-Templates/Shiny-Templates/Progress-Wheel-Shiny/expensive_functions.R')
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = 'This may take a while...')
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may take a while...',"</p>","<p>","finished","</p>")
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may feefefe a while...',"</p>","<p>","finished","</p>")
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may feefefe a while...',"</p>","<p>","finished","</p>"))
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may feefefe a while...',"</p>","<p>","finished","</p>"))
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may feefefe a while...',"</p>","<p>","finished","</p>")))
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may feefefe\n a while...',"</p>","<p>","finished","</p>")))
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
ui <- fluidPage(
plotOutput("plot")
)
server <- shinyServer(function(input, output, session) {
output$plot <- renderPlot({
progress <- shiny::Progress$new(session, min=1, max=15)
on.exit(progress$close())
progress$set(message = 'Calculation in progress',
detail = HTML(paste0("<p>",'This may feefefe\\n /n a while...',"</p>","<p>","finished","</p>")))
for (i in 1:15) {
progress$set(value = i)
Sys.sleep(0.5)
}
plot(cars)
})
})
shinyApp(ui, server)
runApp()
shiny::Progress
runApp()
runApp()
runApp()
runApp()
runApp()
