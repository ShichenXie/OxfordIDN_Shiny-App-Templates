{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(visNetwork)\n\ncolour_list <- c(\"#1b9e77\",\"#d95f02\",\"#7570b3\")\ncategory_list <- c(\"Type A\",\"Type B\", \"Type C\")\n\nvisN_nodes <- data.frame(\"id\" = 1:8,\n                         \"color\" = rep(colour_list,4)[1:8])\n\nsource(\"legend.R\", local = T)\n\n\nshinyServer(function(input, output, session) {\n  \n  output$some_svg <- renderUI({\n    some_svg\n  })\n  \n  \n  output$colour_legend_ui <- renderUI({\n    HTML(colour_legend)\n  })\n\n  visN_edges <- reactive({\n    data.frame(\n      \"from\" = c(1, 5, 7, 6, 5, 4, 2, 8, 2, 4),\n      \"to\" = c(3, 6, 1, 6, 7, 8, 3, 2, 7, 5)\n    )\n  })\n  \n  output$the_network <- renderVisNetwork({\n    visN_edges <- visN_edges()\n    \n    visNetwork(node = visN_nodes,\n               edges = visN_edges) %>% visNodes(shape = input$shape) %>%\n      visEvents(selectNode = \"function(nodes) {\n                Shiny.onInputChange('current_node_id', nodes);\n                ;}\")\n})\n  \n  output$selected_node <- renderText({\n    \n    if(is.null(input$current_node_id)){\n      return()\n    }\n    \n    input$current_node_id$nodes[[1]]\n    \n    \n  })\n  \n})",
    "created" : 1468445547469.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1528126828",
    "id" : "F6C861AC",
    "lastKnownWriteTime" : 1468595748,
    "last_content_update" : 1468595748546,
    "path" : "~/Github/Live-Data_Scripts-and-Templates/Collapsable-Section/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}